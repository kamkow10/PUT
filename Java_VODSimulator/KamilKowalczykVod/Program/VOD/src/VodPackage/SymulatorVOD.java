/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VodPackage;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 * Klasa reprezentująca GUI
 * @author Kowal
 */
public class SymulatorVOD extends javax.swing.JFrame {
    /**
     * Creates new form SymulatorVOD
     */
    public SymulatorVOD() {
        initComponents();
    }
    /**
     * Wskaźnik na produkt wybrany z listy
     */
    private Object wybranyObjekt;
    /**
     * Lista wyszukanych w programie produktów
     */
    private LinkedList<Produkt> wyszukaneProdukty = new LinkedList<>();

    /**
     * Metoda modelująca grafikę, a także tworząca wątek, który ta grafikę będzie aktualizować
     */
    public void showCounters() {
        Thread t;
        t = new Thread(new Runnable() {
            @Override
            public void run() {
                synchronized (Main.ABONAMENTY) {
                    DefaultListModel<String> dlm = new DefaultListModel<>();
                    for (Abonament abonament : Main.ABONAMENTY) {
                        dlm.addElement(abonament.getNazwa());
                    }
                    ListaAbonamentow.setModel(dlm);
                }
                PrzyciskStart.setEnabled(false);
                PrzyciskZapisz.setEnabled(false);
                while (true) {
                    try {
                        synchronized (Main.DOSTEPNE_PRODUKTY) {
                            wyswietlListeNaPanelu();
                            PieniadzeText.setText("<html>Pieniadze: " + Main.PIENIADZEtoString(Main.PIENIADZE) + " $<br/>"
                                    + "Produkty: " + Main.DOSTEPNE_PRODUKTY.size() + "<br/>"
                                    + "Wykupione produkty: " + Main.wykupione + "<br/>"
                                    + "Miesieczna oplata: " + Main.PIENIADZEtoString(Main.MIESIECZNA_OPLATA) + " $");
                        }
                        synchronized (Main.OBECNA_DATA) {
                            NapisData.setText(Main.OBECNA_DATA.toString());
                        }
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SymulatorVOD.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WyborWyswietlania = new javax.swing.ButtonGroup();
        WszystkiePanele = new javax.swing.JPanel();
        PanelStart = new javax.swing.JPanel();
        MainTitle = new javax.swing.JLabel();
        PrzyciskWyjdz = new javax.swing.JButton();
        PrzyciskNowy = new javax.swing.JButton();
        PrzyciskKontynuuj = new javax.swing.JButton();
        PanelKontrolny = new javax.swing.JPanel();
        ScrollPaneListyProduktow = new javax.swing.JScrollPane();
        GlownaListaElementow = new javax.swing.JList<>();
        PieniadzeText = new javax.swing.JLabel();
        NapisData = new javax.swing.JLabel();
        PrzyciskNowyDystrybutor = new javax.swing.JButton();
        PrzyciskNowyUzytkownik = new javax.swing.JButton();
        RadioProdukty = new javax.swing.JRadioButton();
        RadioUzytkownicy = new javax.swing.JRadioButton();
        RadioDystrybutorzy = new javax.swing.JRadioButton();
        NapisAbonamenty = new javax.swing.JLabel();
        ScrollPaneAbonamentow = new javax.swing.JScrollPane();
        ListaAbonamentow = new javax.swing.JList<>();
        PrzyciskDodajSerial = new javax.swing.JButton();
        PrzyciskDodajFilm = new javax.swing.JButton();
        PrzyciskDodajLive = new javax.swing.JButton();
        TextSzukany = new javax.swing.JTextField();
        PrzyciskSzukaj = new javax.swing.JButton();
        TrybSzukania = new javax.swing.JComboBox<>();
        PrzyciskPauza = new javax.swing.JButton();
        PrzyciskStart = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        PrzyciskZapisz = new javax.swing.JButton();
        PanelProdukt = new javax.swing.JPanel();
        PrzyciskWsteczInfo = new javax.swing.JButton();
        ScrollPaneInfoText = new javax.swing.JScrollPane();
        InfoText = new javax.swing.JTextArea();
        PrzyciskUsun = new javax.swing.JButton();
        NapisCena = new javax.swing.JLabel();
        PrzyciskPlus = new javax.swing.JButton();
        PrzyciskMinus = new javax.swing.JButton();
        PrzyciskPokazWykres = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        WszystkiePanele.setLayout(new java.awt.CardLayout());

        PanelStart.setBackground(new java.awt.Color(0, 0, 0));

        MainTitle.setBackground(new java.awt.Color(0, 0, 0));
        MainTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 70)); // NOI18N
        MainTitle.setForeground(new java.awt.Color(153, 0, 0));
        MainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MainTitle.setText("Symulator VOD");

        PrzyciskWyjdz.setBackground(new java.awt.Color(102, 0, 0));
        PrzyciskWyjdz.setFont(new java.awt.Font("Consolas", 0, 50)); // NOI18N
        PrzyciskWyjdz.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskWyjdz.setText("Wyjdź");
        PrzyciskWyjdz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskWyjdzActionPerformed(evt);
            }
        });

        PrzyciskNowy.setBackground(new java.awt.Color(0, 51, 0));
        PrzyciskNowy.setFont(new java.awt.Font("Consolas", 0, 50)); // NOI18N
        PrzyciskNowy.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskNowy.setText("Nowy");
        PrzyciskNowy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskNowyActionPerformed(evt);
            }
        });

        PrzyciskKontynuuj.setBackground(new java.awt.Color(153, 102, 0));
        PrzyciskKontynuuj.setFont(new java.awt.Font("Consolas", 0, 50)); // NOI18N
        PrzyciskKontynuuj.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskKontynuuj.setText("Kontynuuj");
        PrzyciskKontynuuj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskKontynuujActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelStartLayout = new javax.swing.GroupLayout(PanelStart);
        PanelStart.setLayout(PanelStartLayout);
        PanelStartLayout.setHorizontalGroup(
            PanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PrzyciskNowy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PanelStartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(PrzyciskKontynuuj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PrzyciskWyjdz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelStartLayout.setVerticalGroup(
            PanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelStartLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(MainTitle)
                .addGap(43, 43, 43)
                .addComponent(PrzyciskNowy, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrzyciskKontynuuj, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrzyciskWyjdz, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        WszystkiePanele.add(PanelStart, "card2");

        PanelKontrolny.setBackground(new java.awt.Color(0, 0, 0));

        GlownaListaElementow.setBackground(new java.awt.Color(51, 51, 51));
        GlownaListaElementow.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GlownaListaElementow.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        GlownaListaElementow.setForeground(new java.awt.Color(255, 255, 255));
        GlownaListaElementow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GlownaListaElementowMouseClicked(evt);
            }
        });
        ScrollPaneListyProduktow.setViewportView(GlownaListaElementow);

        PieniadzeText.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        PieniadzeText.setForeground(new java.awt.Color(255, 255, 255));
        PieniadzeText.setText("<html> linia<br/> linia<br/> linia<br/> linia");

        NapisData.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        NapisData.setForeground(new java.awt.Color(255, 255, 255));
        NapisData.setText("11.11.1111");
        NapisData.setToolTipText("");

        PrzyciskNowyDystrybutor.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskNowyDystrybutor.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskNowyDystrybutor.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskNowyDystrybutor.setText("Nowy Dystrybutor");
        PrzyciskNowyDystrybutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskNowyDystrybutorActionPerformed(evt);
            }
        });

        PrzyciskNowyUzytkownik.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskNowyUzytkownik.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskNowyUzytkownik.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskNowyUzytkownik.setText("Nowy Użytkownik");
        PrzyciskNowyUzytkownik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskNowyUzytkownikActionPerformed(evt);
            }
        });

        RadioProdukty.setBackground(new java.awt.Color(204, 204, 204));
        WyborWyswietlania.add(RadioProdukty);
        RadioProdukty.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        RadioProdukty.setForeground(new java.awt.Color(0, 0, 0));
        RadioProdukty.setText("Produkty");
        RadioProdukty.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 30, true));
        RadioProdukty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioProduktyMouseClicked(evt);
            }
        });

        RadioUzytkownicy.setBackground(new java.awt.Color(204, 204, 204));
        WyborWyswietlania.add(RadioUzytkownicy);
        RadioUzytkownicy.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        RadioUzytkownicy.setForeground(new java.awt.Color(0, 0, 0));
        RadioUzytkownicy.setText("Użytkownicy");
        RadioUzytkownicy.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 30, true));
        RadioUzytkownicy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioUzytkownicyMouseClicked(evt);
            }
        });

        RadioDystrybutorzy.setBackground(new java.awt.Color(204, 204, 204));
        WyborWyswietlania.add(RadioDystrybutorzy);
        RadioDystrybutorzy.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        RadioDystrybutorzy.setForeground(new java.awt.Color(0, 0, 0));
        RadioDystrybutorzy.setText("Dystrybutorzy");
        RadioDystrybutorzy.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 30, true));
        RadioDystrybutorzy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RadioDystrybutorzyMouseClicked(evt);
            }
        });

        NapisAbonamenty.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        NapisAbonamenty.setForeground(new java.awt.Color(255, 255, 255));
        NapisAbonamenty.setText("Abonamenty");
        NapisAbonamenty.setToolTipText("");

        ScrollPaneAbonamentow.setBackground(new java.awt.Color(0, 0, 0));
        ScrollPaneAbonamentow.setForeground(new java.awt.Color(0, 0, 0));

        ListaAbonamentow.setBackground(new java.awt.Color(51, 51, 51));
        ListaAbonamentow.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ListaAbonamentow.setForeground(new java.awt.Color(255, 255, 255));
        ListaAbonamentow.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ListaAbonamentow.setOpaque(false);
        ListaAbonamentow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaAbonamentowMouseClicked(evt);
            }
        });
        ScrollPaneAbonamentow.setViewportView(ListaAbonamentow);

        PrzyciskDodajSerial.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskDodajSerial.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskDodajSerial.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskDodajSerial.setText("Dodaj Serial");
        PrzyciskDodajSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskDodajSerialActionPerformed(evt);
            }
        });

        PrzyciskDodajFilm.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskDodajFilm.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskDodajFilm.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskDodajFilm.setText("Dodaj Film");
        PrzyciskDodajFilm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskDodajFilmActionPerformed(evt);
            }
        });

        PrzyciskDodajLive.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskDodajLive.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskDodajLive.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskDodajLive.setText("Dodaj Live");
        PrzyciskDodajLive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskDodajLiveActionPerformed(evt);
            }
        });

        TextSzukany.setBackground(new java.awt.Color(51, 51, 51));
        TextSzukany.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        TextSzukany.setForeground(new java.awt.Color(255, 255, 255));
        TextSzukany.setEnabled(false);

        PrzyciskSzukaj.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskSzukaj.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskSzukaj.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskSzukaj.setText("Szukaj");
        PrzyciskSzukaj.setEnabled(false);
        PrzyciskSzukaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskSzukajActionPerformed(evt);
            }
        });

        TrybSzukania.setBackground(new java.awt.Color(51, 51, 51));
        TrybSzukania.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        TrybSzukania.setForeground(new java.awt.Color(255, 255, 255));
        TrybSzukania.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nazwa", "Aktor" }));
        TrybSzukania.setEnabled(false);

        PrzyciskPauza.setBackground(new java.awt.Color(153, 153, 0));
        PrzyciskPauza.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PrzyciskPauza.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskPauza.setText("Pauza");
        PrzyciskPauza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskPauzaActionPerformed(evt);
            }
        });

        PrzyciskStart.setBackground(new java.awt.Color(51, 102, 0));
        PrzyciskStart.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PrzyciskStart.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskStart.setText("Start");
        PrzyciskStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskStartActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 0, 0));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Wyjdź");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        PrzyciskZapisz.setBackground(new java.awt.Color(204, 102, 0));
        PrzyciskZapisz.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PrzyciskZapisz.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskZapisz.setText("Zapisz");
        PrzyciskZapisz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskZapiszActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelKontrolnyLayout = new javax.swing.GroupLayout(PanelKontrolny);
        PanelKontrolny.setLayout(PanelKontrolnyLayout);
        PanelKontrolnyLayout.setHorizontalGroup(
            PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                        .addComponent(NapisData)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(PieniadzeText)
                    .addComponent(PrzyciskNowyDystrybutor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPaneAbonamentow)
                            .addComponent(PrzyciskDodajSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PrzyciskDodajFilm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PrzyciskDodajLive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                                .addComponent(NapisAbonamenty)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(PrzyciskNowyUzytkownik, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RadioProdukty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RadioUzytkownicy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RadioDystrybutorzy, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(PrzyciskStart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PrzyciskPauza, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PrzyciskZapisz, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelKontrolnyLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ScrollPaneListyProduktow, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelKontrolnyLayout.createSequentialGroup()
                                .addComponent(PrzyciskSzukaj, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextSzukany, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TrybSzukania, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        PanelKontrolnyLayout.setVerticalGroup(
            PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                .addComponent(NapisData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PieniadzeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrzyciskNowyDystrybutor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrzyciskNowyUzytkownik)
                .addGap(16, 16, 16)
                .addComponent(RadioProdukty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioUzytkownicy, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioDystrybutorzy, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(NapisAbonamenty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneAbonamentow, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(PrzyciskDodajSerial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrzyciskDodajFilm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrzyciskDodajLive)
                .addGap(13, 13, 13))
            .addGroup(PanelKontrolnyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PrzyciskZapisz, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PrzyciskStart, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PrzyciskPauza, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(PanelKontrolnyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PrzyciskSzukaj)
                    .addComponent(TextSzukany)
                    .addComponent(TrybSzukania, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneListyProduktow)
                .addGap(27, 27, 27))
        );

        WszystkiePanele.add(PanelKontrolny, "card2");

        PanelProdukt.setBackground(new java.awt.Color(0, 0, 0));
        PanelProdukt.setForeground(new java.awt.Color(255, 255, 255));

        PrzyciskWsteczInfo.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskWsteczInfo.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskWsteczInfo.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskWsteczInfo.setText("Wstecz");
        PrzyciskWsteczInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskWsteczInfoActionPerformed(evt);
            }
        });

        InfoText.setEditable(false);
        InfoText.setBackground(new java.awt.Color(51, 51, 51));
        InfoText.setColumns(20);
        InfoText.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        InfoText.setForeground(new java.awt.Color(255, 255, 255));
        InfoText.setLineWrap(true);
        InfoText.setRows(5);
        InfoText.setWrapStyleWord(true);
        InfoText.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ScrollPaneInfoText.setViewportView(InfoText);

        PrzyciskUsun.setBackground(new java.awt.Color(204, 0, 0));
        PrzyciskUsun.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskUsun.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskUsun.setText("Usuń");
        PrzyciskUsun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskUsunActionPerformed(evt);
            }
        });

        NapisCena.setBackground(new java.awt.Color(0, 0, 0));
        NapisCena.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        NapisCena.setForeground(new java.awt.Color(255, 255, 255));
        NapisCena.setText("Ustawianie ceny:");

        PrzyciskPlus.setBackground(new java.awt.Color(51, 102, 0));
        PrzyciskPlus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        PrzyciskPlus.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskPlus.setText("+ 1$");
        PrzyciskPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskPlusActionPerformed(evt);
            }
        });

        PrzyciskMinus.setBackground(new java.awt.Color(102, 0, 0));
        PrzyciskMinus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        PrzyciskMinus.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskMinus.setText("- 1$");
        PrzyciskMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskMinusActionPerformed(evt);
            }
        });

        PrzyciskPokazWykres.setBackground(new java.awt.Color(51, 51, 51));
        PrzyciskPokazWykres.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        PrzyciskPokazWykres.setForeground(new java.awt.Color(255, 255, 255));
        PrzyciskPokazWykres.setText("WYKRES");
        PrzyciskPokazWykres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrzyciskPokazWykresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelProduktLayout = new javax.swing.GroupLayout(PanelProdukt);
        PanelProdukt.setLayout(PanelProduktLayout);
        PanelProduktLayout.setHorizontalGroup(
            PanelProduktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelProduktLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPaneInfoText, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelProduktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PrzyciskUsun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PrzyciskWsteczInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PanelProduktLayout.createSequentialGroup()
                        .addComponent(NapisCena)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PanelProduktLayout.createSequentialGroup()
                        .addComponent(PrzyciskPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PrzyciskMinus, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                    .addComponent(PrzyciskPokazWykres, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanelProduktLayout.setVerticalGroup(
            PanelProduktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelProduktLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelProduktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelProduktLayout.createSequentialGroup()
                        .addComponent(PrzyciskWsteczInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PrzyciskUsun)
                        .addGap(30, 30, 30)
                        .addComponent(NapisCena)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelProduktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PrzyciskPlus)
                            .addComponent(PrzyciskMinus))
                        .addGap(30, 30, 30)
                        .addComponent(PrzyciskPokazWykres)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ScrollPaneInfoText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
                .addContainerGap())
        );

        WszystkiePanele.add(PanelProdukt, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(WszystkiePanele, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(WszystkiePanele, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metoda wyświetla liste objektów na panelu
     */
    private void wyswietlListeNaPanelu() {
        DefaultListModel<String> dlm = new DefaultListModel<>();
        int i = 1;
        if (RadioProdukty.isSelected()) {
            synchronized (Main.DOSTEPNE_PRODUKTY) {
                for (Produkt produkt : Main.DOSTEPNE_PRODUKTY) {
                    dlm.addElement(i++ + ". " + produkt.getNazwa() + " (" + produkt.getClass().getSimpleName() + ")");
                }
            }
            GlownaListaElementow.setModel(dlm);
        } else if (RadioUzytkownicy.isSelected()) {
            synchronized (Main.UZYTKOWNICY) {
                for (Uzytkownik uzytkownik : Main.UZYTKOWNICY) {
                    dlm.addElement(i++ + ". " + uzytkownik.getNazwa());
                }
            }
            GlownaListaElementow.setModel(dlm);
        } else if (RadioDystrybutorzy.isSelected()) {
            synchronized (Main.DYSTRYBUTORZY) {
                for (Dystrybutor dystrybutor : Main.DYSTRYBUTORZY) {
                    dlm.addElement(i++ + ". " + dystrybutor.getNazwa());
                }
            }
            GlownaListaElementow.setModel(dlm);
        }
    }
    /**
     * Metoda zmienia cene wybranego obiektu
     * @param oIle o ile cena ma się zmienić
     */
    public void zmienCene(int oIle) {
        if ((this.wybranyObjekt.getClass() == Serial.class)
                || (this.wybranyObjekt.getClass() == Film.class)
                || (this.wybranyObjekt.getClass() == Live.class)) {
            Produkt p = (Produkt) (this.wybranyObjekt);
            synchronized (p) {
                p.setCena(p.getCena() + oIle);
            }
            if (p.getCena() == 0) {
                PrzyciskMinus.setEnabled(false);
            } else {
                PrzyciskMinus.setEnabled(true);
            }
        } else if (this.wybranyObjekt.getClass() == Abonament.class) {
            Abonament a = (Abonament) (this.wybranyObjekt);
            synchronized (a) {
                a.setCena(a.getCena() + oIle);
            }
            if (a.getCena() == 0) {
                PrzyciskMinus.setEnabled(false);
            } else {
                PrzyciskMinus.setEnabled(true);
            }
        }
    }
    /**
     * Metoda wstecz (powrót do panelu kontrolnego
     */
    private void PrzyciskWsteczInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskWsteczInfoActionPerformed
        WszystkiePanele.removeAll();
        WszystkiePanele.add(PanelKontrolny);
        WszystkiePanele.repaint();
        WszystkiePanele.revalidate();
    }//GEN-LAST:event_PrzyciskWsteczInfoActionPerformed
    /**
     * Metoda usuwająca wybrany element
     */
    private void PrzyciskUsunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskUsunActionPerformed
        if (RadioProdukty.isSelected()) {
            synchronized (Main.DOSTEPNE_PRODUKTY) {
                if (Main.DOSTEPNE_PRODUKTY.contains(this.wybranyObjekt)) {
                    Main.DOSTEPNE_PRODUKTY.remove(this.wybranyObjekt);
                    synchronized (Main.UZYTKOWNICY) {
                        for (Uzytkownik uzytkownik : Main.UZYTKOWNICY) {
                            if (uzytkownik.getKupioneProdukty().contains(this.wybranyObjekt)) {
                                uzytkownik.getKupioneProdukty().remove(this.wybranyObjekt);
                                if (wybranyObjekt.getClass() == Film.class) {
                                    Film f = (Film) (wybranyObjekt);
                                    for (WykupionyFilm wykupionyFilm : uzytkownik.getWykupioneFilmy()) {
                                        if (wykupionyFilm.getFilm() == f) {
                                            uzytkownik.getWykupioneFilmy().remove(wykupionyFilm);
                                            break;
                                        }
                                    }
                                }
                                if (wybranyObjekt.getClass() == Serial.class) {
                                    Serial s = (Serial) (wybranyObjekt);
                                    for (Odcinek odcinek : s.getListaOdcinkow()) {
                                        if (uzytkownik.getKupioneOdcinki().contains(odcinek)) {
                                            uzytkownik.getKupioneOdcinki().remove(odcinek);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    synchronized (Main.DYSTRYBUTORZY) {
                        for (Dystrybutor dystrybutor : Main.DYSTRYBUTORZY) {
                            if (dystrybutor.getDodaneProdukty().contains(this.wybranyObjekt)) {
                                dystrybutor.getDodaneProdukty().remove(this.wybranyObjekt);
                            }
                        }
                    }
                    synchronized (Main.ABONAMENTY) {
                        for (Abonament abonament : Main.ABONAMENTY) {
                            if (abonament.getPulaDostepnychProduktow().contains(this.wybranyObjekt)) {
                                abonament.getPulaDostepnychProduktow().remove(this.wybranyObjekt);
                            }
                        }
                    }
                }
            }
        } else if (RadioUzytkownicy.isSelected()) {
            synchronized (Main.UZYTKOWNICY) {
                if (Main.UZYTKOWNICY.contains(this.wybranyObjekt)) {
                    Uzytkownik u = (Uzytkownik) (wybranyObjekt);
                    synchronized (u) {
                        u.getMyThread().stop();
                        u.getMyThread().interrupt();
                    }
                    Main.UZYTKOWNICY.remove(this.wybranyObjekt);
                }
            }
        } else if (RadioDystrybutorzy.isSelected()) {
            synchronized (Main.DYSTRYBUTORZY) {
                if (Main.DYSTRYBUTORZY.contains(this.wybranyObjekt)) {
                    Dystrybutor d = (Dystrybutor) (wybranyObjekt);
                    synchronized (d) {
                        d.getMyThread().stop();
                        d.getMyThread().interrupt();
                    }
                    Main.DYSTRYBUTORZY.remove(this.wybranyObjekt);
                }
            }
        }
        WszystkiePanele.removeAll();
        WszystkiePanele.add(PanelKontrolny);
        WszystkiePanele.repaint();
        WszystkiePanele.revalidate();
        wyswietlListeNaPanelu();
    }//GEN-LAST:event_PrzyciskUsunActionPerformed
    /**
     * Metoda zwiększająca cenę wybranego produktu o 1
     */
    private void PrzyciskPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskPlusActionPerformed
        zmienCene(1);
        InfoText.setText(this.wybranyObjekt.toString());
        InfoText.setCaretPosition(0);
    }//GEN-LAST:event_PrzyciskPlusActionPerformed
    /**
     * Metdoa zmniejszająca cenę wybranego produktu o 1
     */
    private void PrzyciskMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskMinusActionPerformed
        zmienCene(-1);
        InfoText.setText(this.wybranyObjekt.toString());
        InfoText.setCaretPosition(0);
    }//GEN-LAST:event_PrzyciskMinusActionPerformed
    /**
     * Metoda startująca symulującę (odblokowująca pauzę)
     */
    private void PrzyciskStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskStartActionPerformed
        Main.PAUZA = false;
        PrzyciskStart.setEnabled(false);
        PrzyciskPauza.setEnabled(true);
        PrzyciskZapisz.setEnabled(false);
    }//GEN-LAST:event_PrzyciskStartActionPerformed
    /**
     * Metoda pauzująca symulację
     */
    private void PrzyciskPauzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskPauzaActionPerformed
        Main.PAUZA = true;
        PrzyciskStart.setEnabled(true);
        PrzyciskPauza.setEnabled(false);
        PrzyciskZapisz.setEnabled(true);
    }//GEN-LAST:event_PrzyciskPauzaActionPerformed
    /**
     * Metoda wyszukująca
     */
    private void PrzyciskSzukajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskSzukajActionPerformed
        wyszukaneProdukty.clear();
        WyborWyswietlania.clearSelection();
        DefaultListModel<String> dlm = new DefaultListModel<>();
        if (TrybSzukania.getSelectedItem().toString().equals("Nazwa")) {
            synchronized (Main.DOSTEPNE_PRODUKTY) {
                int i = 1;
                for (Produkt produkt : Main.DOSTEPNE_PRODUKTY) {
                    if (produkt.getNazwa().contains(TextSzukany.getText())) {
                        dlm.addElement(i++ + ". " + produkt.getNazwa()
                                + " (" + produkt.getClass().getSimpleName() + ", "
                                + produkt.getDystrybutorProduktu().getNazwa() + ")");
                        wyszukaneProdukty.add(produkt);
                    }
                }
            }
        } else if (TrybSzukania.getSelectedItem().toString().equals("Aktor")) {
            synchronized (Main.DOSTEPNE_PRODUKTY) {
                int i = 1;
                Film f;
                Serial s;
                for (Produkt produkt : Main.DOSTEPNE_PRODUKTY) {
                    if (produkt.getClass() == Film.class) {
                        f = (Film) (produkt);
                        if (f.getListaAktorow().contains(TextSzukany.getText())) {
                            dlm.addElement(i++ + ". " + produkt.getNazwa()
                                    + " (" + produkt.getClass().getSimpleName() + ", "
                                    + produkt.getDystrybutorProduktu().getNazwa() + ")");
                            wyszukaneProdukty.add(produkt);
                        }
                    }
                    if (produkt.getClass() == Serial.class) {
                        s = (Serial) (produkt);
                        if (s.getListaAktorow().contains(TextSzukany.getText())) {
                            dlm.addElement(i++ + ". " + produkt.getNazwa()
                                    + " (" + produkt.getClass().getSimpleName() + ", "
                                    + produkt.getDystrybutorProduktu().getNazwa() + ")");
                            wyszukaneProdukty.add(produkt);
                        }
                    }

                }
            }
        }

        GlownaListaElementow.setModel(dlm);
    }//GEN-LAST:event_PrzyciskSzukajActionPerformed
    /**
     * Metoda dodająca Live
     */
    private void PrzyciskDodajLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskDodajLiveActionPerformed
        Produkt p = new Live(Main.USER);
        Main.USER.getDodaneProdukty().add(p);
        synchronized (Main.DOSTEPNE_PRODUKTY) {
            Main.DOSTEPNE_PRODUKTY.add(p);
        }
        synchronized (Main.MIESIECZNA_OPLATA) {
            Main.MIESIECZNA_OPLATA += 10;
        }
    }//GEN-LAST:event_PrzyciskDodajLiveActionPerformed
    /**
     * Metoda dodająca Film
     */
    private void PrzyciskDodajFilmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskDodajFilmActionPerformed
        Produkt p = new Film(Main.USER);
        Main.USER.getDodaneProdukty().add(p);
        synchronized (Main.DOSTEPNE_PRODUKTY) {
            Main.DOSTEPNE_PRODUKTY.add(p);
        }
        synchronized (Main.MIESIECZNA_OPLATA) {
            Main.MIESIECZNA_OPLATA += 10;
        }
    }//GEN-LAST:event_PrzyciskDodajFilmActionPerformed
    /**
     * Metoda dodająca Serial
     */
    private void PrzyciskDodajSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskDodajSerialActionPerformed
        Produkt p = new Serial(Main.USER);
        Main.USER.getDodaneProdukty().add(p);
        synchronized (Main.DOSTEPNE_PRODUKTY) {
            Main.DOSTEPNE_PRODUKTY.add(p);
        }
        synchronized (Main.MIESIECZNA_OPLATA) {
            Main.MIESIECZNA_OPLATA += 40;
        }
    }//GEN-LAST:event_PrzyciskDodajSerialActionPerformed
    /**
     * Metoda wyświetlająca informacje o abonamencie
     */
    private void ListaAbonamentowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaAbonamentowMouseClicked
        if ((evt.getClickCount() == 2) && (ListaAbonamentow.getModel().getSize() != 0)) {
            int ind = ListaAbonamentow.locationToIndex(evt.getPoint());
            WszystkiePanele.removeAll();
            WszystkiePanele.add(PanelProdukt);
            WszystkiePanele.repaint();
            WszystkiePanele.revalidate();
            synchronized (Main.ABONAMENTY) {
                Abonament a = Main.ABONAMENTY.get(ind);
                InfoText.setText(a.toString());
                this.wybranyObjekt = a;
                this.PrzyciskUsun.setEnabled(false);
                this.PrzyciskPlus.setEnabled(true);
                this.PrzyciskMinus.setEnabled(true);
            }
            InfoText.setCaretPosition(0);
            Main.PAUZA = true;
            PrzyciskStart.setEnabled(true);
            PrzyciskPauza.setEnabled(false);
            PrzyciskZapisz.setEnabled(true);
        }
    }//GEN-LAST:event_ListaAbonamentowMouseClicked
    /**
     * Metoda dodająca uzytkownika
     */
    private void PrzyciskNowyUzytkownikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskNowyUzytkownikActionPerformed
        Main.newUzytkownik();
        synchronized (Main.MIESIECZNA_OPLATA) {
            Main.MIESIECZNA_OPLATA += 20;
        }
    }//GEN-LAST:event_PrzyciskNowyUzytkownikActionPerformed
    /**
     * Metoda dodająca dystrybutora
     */
    private void PrzyciskNowyDystrybutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskNowyDystrybutorActionPerformed
        Main.newDystrybutor();
        synchronized (Main.MIESIECZNA_OPLATA) {
            Main.MIESIECZNA_OPLATA += 300;
        }
    }//GEN-LAST:event_PrzyciskNowyDystrybutorActionPerformed
    /**
     * Metoda wyświetlająca informacje o produkcie, użytkowniku, bądź dystrybutorze
     */
    private void GlownaListaElementowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GlownaListaElementowMouseClicked
        if ((evt.getClickCount() == 2) && (GlownaListaElementow.getModel().getSize() != 0)) {
            int ind = GlownaListaElementow.locationToIndex(evt.getPoint());
            WszystkiePanele.removeAll();
            WszystkiePanele.add(PanelProdukt);
            WszystkiePanele.repaint();
            WszystkiePanele.revalidate();
            this.PrzyciskUsun.setEnabled(true);
            if (RadioProdukty.isSelected()) {
                synchronized (Main.DOSTEPNE_PRODUKTY) {
                    Produkt p = Main.DOSTEPNE_PRODUKTY.get(ind);
                    InfoText.setText(p.toString());
                    this.wybranyObjekt = p;
                    PrzyciskPlus.setEnabled(true);
                    PrzyciskMinus.setEnabled(true);
                }
            } else if (RadioUzytkownicy.isSelected()) {
                synchronized (Main.UZYTKOWNICY) {
                    Uzytkownik u = Main.UZYTKOWNICY.get(ind);
                    InfoText.setText(u.toString());
                    this.wybranyObjekt = u;
                    PrzyciskPlus.setEnabled(false);
                    PrzyciskMinus.setEnabled(false);
                }
            } else if (RadioDystrybutorzy.isSelected()) {
                synchronized (Main.DYSTRYBUTORZY) {
                    Dystrybutor d = Main.DYSTRYBUTORZY.get(ind);
                    InfoText.setText(d.toString());
                    this.wybranyObjekt = d;
                    PrzyciskPlus.setEnabled(false);
                    PrzyciskMinus.setEnabled(false);
                }
            } else {
                Produkt p = wyszukaneProdukty.get(ind);
                InfoText.setText(p.toString());
                this.wybranyObjekt = p;
                PrzyciskPlus.setEnabled(true);
                PrzyciskMinus.setEnabled(true);
            }
            InfoText.setCaretPosition(0);
            Main.PAUZA = true;
            PrzyciskStart.setEnabled(true);
            PrzyciskPauza.setEnabled(false);
            PrzyciskZapisz.setEnabled(true);
        }
    }//GEN-LAST:event_GlownaListaElementowMouseClicked
    /**
     * Metoda wyjścia
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Metoda pokazująca wykres
     */
    private void PrzyciskPokazWykresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskPokazWykresActionPerformed
        Wykres.create((Produkt) (this.wybranyObjekt));
    }//GEN-LAST:event_PrzyciskPokazWykresActionPerformed
    /**
     * Metoda zapisująca stan symulacji
     */
    private void PrzyciskZapiszActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskZapiszActionPerformed
        String nazwaPliku = "E:/dane.ser";
        ObjectOutputStream out;

        File dir = new File(nazwaPliku);
        if (!dir.exists()) {
            try {
                File.createTempFile("dane", "ser", new File("E:/"));
            } catch (IOException ex) {
                Logger.getLogger(SymulatorVOD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try {
            out = new ObjectOutputStream(
                    new BufferedOutputStream(
                            new FileOutputStream(nazwaPliku)));

            synchronized (Main.DOSTEPNE_PRODUKTY) {
                out.writeObject(Main.DOSTEPNE_PRODUKTY.size());
                for (Produkt produkt : Main.DOSTEPNE_PRODUKTY) {
                    out.writeObject(produkt);
                }
            }
            synchronized (Main.OBECNA_DATA) {
                out.writeObject(Main.OBECNA_DATA);
            }
            synchronized (Main.ABONAMENTY) {
                out.writeObject(Main.ABONAMENTY.get(0));
                out.writeObject(Main.ABONAMENTY.get(1));
                out.writeObject(Main.ABONAMENTY.get(2));
            }
            synchronized (Main.DYSTRYBUTORZY) {
                out.writeObject(Main.DYSTRYBUTORZY.size());
                for (Dystrybutor dystrybutor : Main.DYSTRYBUTORZY) {
                    out.writeObject(dystrybutor);
                }
            }

            synchronized (Main.UZYTKOWNICY) {
                out.writeObject(Main.UZYTKOWNICY.size());
                for (Uzytkownik uzytkownik : Main.UZYTKOWNICY) {
                    out.writeObject(uzytkownik);
                }
            }
            out.writeObject(Main.PIENIADZE);
            out.writeObject(Main.wykupione);

            out.close();

            JOptionPane.showMessageDialog(null, "Zapisano!");
        } catch (IOException ex) {
            Logger.getLogger(SymulatorVOD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PrzyciskZapiszActionPerformed
    /**
     * Metoda rozpoczunająca nową symulację
     */
    private void PrzyciskNowyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskNowyActionPerformed
        WszystkiePanele.removeAll();
        WszystkiePanele.add(PanelKontrolny);
        WszystkiePanele.repaint();
        WszystkiePanele.revalidate();

        Abonament ABONAMENT_Basic = new Abonament("Basic", 18, 1);
        Abonament ABONAMENT_Family = new Abonament("Family", 50, 5);
        Abonament ABONAMENT_Premium = new Abonament("Premium", 32, 2);
        Main.ABONAMENTY.add(ABONAMENT_Basic);
        Main.ABONAMENTY.add(ABONAMENT_Family);
        Main.ABONAMENTY.add(ABONAMENT_Premium);

        Main.USER.setNazwa("User");
        Main.USER.setStawka(0);

        Main.vodFrame.showCounters();
        Main.czasThread.start();
        Main.kontrolaZmianyDniaThread.start();
    }//GEN-LAST:event_PrzyciskNowyActionPerformed
    /**
     * Metoda wyjścia z aplikacji
     */
    private void PrzyciskWyjdzActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskWyjdzActionPerformed
        System.exit(0);
    }//GEN-LAST:event_PrzyciskWyjdzActionPerformed
    /**
     * Metoda wczytania ostatniego zapisu stanu symulacji i kontynuowaniu go    
     */
    private void PrzyciskKontynuujActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrzyciskKontynuujActionPerformed
        WszystkiePanele.removeAll();
        WszystkiePanele.add(PanelKontrolny);
        WszystkiePanele.repaint();
        WszystkiePanele.revalidate();
        String nazwaPliku = "E:/dane.ser";
        try {
            ObjectInputStream in = new ObjectInputStream(
                    new BufferedInputStream(
                            new FileInputStream(nazwaPliku)));

            synchronized (Main.DOSTEPNE_PRODUKTY) {
                Integer i = (Integer) in.readObject();
                for (int j = 0; j < i; j++) {
                    Main.DOSTEPNE_PRODUKTY.add((Produkt) in.readObject());
                }
            }
            synchronized (Main.OBECNA_DATA) {
                Main.OBECNA_DATA = (Data) in.readObject();
            }
            synchronized (Main.ABONAMENTY) {
                Main.ABONAMENTY.add((Abonament) in.readObject());
                Main.ABONAMENTY.add((Abonament) in.readObject());
                Main.ABONAMENTY.add((Abonament) in.readObject());
            }
            synchronized (Main.DYSTRYBUTORZY) {
                Integer i = (Integer) in.readObject();
                for (int j = 0; j < i; j++) {
                    Main.DYSTRYBUTORZY.add((Dystrybutor) in.readObject());
                }
            }

            synchronized (Main.UZYTKOWNICY) {
                Integer i = (Integer) in.readObject();
                for (int j = 0; j < i; j++) {
                    Main.UZYTKOWNICY.add((Uzytkownik) in.readObject());
                }
            }
            Main.PIENIADZE = (Float) in.readObject();
            Main.wykupione = (Integer) in.readObject();

            in.close();

            Main.USER.setNazwa("User");
            Main.USER.setStawka(0);

            for (Dystrybutor dystrybutor : Main.DYSTRYBUTORZY) {
                dystrybutor.setMyThread(new Thread(dystrybutor));
                dystrybutor.getMyThread().start();
            }
            for (Uzytkownik uzytkownik : Main.UZYTKOWNICY) {
                uzytkownik.setMyThread(new Thread(uzytkownik));
                uzytkownik.getMyThread().start();
            }

            Main.vodFrame.showCounters();
            Main.czasThread.start();
            Main.kontrolaZmianyDniaThread.start();

        } catch (IOException ex) {
            Logger.getLogger(SymulatorVOD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SymulatorVOD.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_PrzyciskKontynuujActionPerformed

    private void RadioProduktyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioProduktyMouseClicked
        PrzyciskSzukaj.setEnabled(true);
        TextSzukany.setEnabled(true);
        TrybSzukania.setEnabled(true);
    }//GEN-LAST:event_RadioProduktyMouseClicked

    private void RadioUzytkownicyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioUzytkownicyMouseClicked
        PrzyciskSzukaj.setEnabled(false);
        TextSzukany.setEnabled(false);
        TrybSzukania.setEnabled(false);
    }//GEN-LAST:event_RadioUzytkownicyMouseClicked

    private void RadioDystrybutorzyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RadioDystrybutorzyMouseClicked
        PrzyciskSzukaj.setEnabled(false);
        TextSzukany.setEnabled(false);
        TrybSzukania.setEnabled(false);
    }//GEN-LAST:event_RadioDystrybutorzyMouseClicked

    /**
     *
     */
    public void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SymulatorVOD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SymulatorVOD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SymulatorVOD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SymulatorVOD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        File dir = new File("E:/dane.ser");
        if (!dir.exists()) {
            PrzyciskKontynuuj.setEnabled(false);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> GlownaListaElementow;
    private javax.swing.JTextArea InfoText;
    private javax.swing.JList<String> ListaAbonamentow;
    private javax.swing.JLabel MainTitle;
    private javax.swing.JLabel NapisAbonamenty;
    private javax.swing.JLabel NapisCena;
    private javax.swing.JLabel NapisData;
    private javax.swing.JPanel PanelKontrolny;
    private javax.swing.JPanel PanelProdukt;
    private javax.swing.JPanel PanelStart;
    private javax.swing.JLabel PieniadzeText;
    private javax.swing.JButton PrzyciskDodajFilm;
    private javax.swing.JButton PrzyciskDodajLive;
    private javax.swing.JButton PrzyciskDodajSerial;
    private javax.swing.JButton PrzyciskKontynuuj;
    private javax.swing.JButton PrzyciskMinus;
    private javax.swing.JButton PrzyciskNowy;
    private javax.swing.JButton PrzyciskNowyDystrybutor;
    private javax.swing.JButton PrzyciskNowyUzytkownik;
    private javax.swing.JButton PrzyciskPauza;
    private javax.swing.JButton PrzyciskPlus;
    private javax.swing.JButton PrzyciskPokazWykres;
    private javax.swing.JButton PrzyciskStart;
    private javax.swing.JButton PrzyciskSzukaj;
    private javax.swing.JButton PrzyciskUsun;
    private javax.swing.JButton PrzyciskWsteczInfo;
    private javax.swing.JButton PrzyciskWyjdz;
    private javax.swing.JButton PrzyciskZapisz;
    private javax.swing.JRadioButton RadioDystrybutorzy;
    private javax.swing.JRadioButton RadioProdukty;
    private javax.swing.JRadioButton RadioUzytkownicy;
    private javax.swing.JScrollPane ScrollPaneAbonamentow;
    private javax.swing.JScrollPane ScrollPaneInfoText;
    private javax.swing.JScrollPane ScrollPaneListyProduktow;
    private javax.swing.JTextField TextSzukany;
    private javax.swing.JComboBox<String> TrybSzukania;
    private javax.swing.JPanel WszystkiePanele;
    private javax.swing.ButtonGroup WyborWyswietlania;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

}
